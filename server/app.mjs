import express from "express";
import http from "http";
import { WebSocketServer } from "ws";
import net from "net";
import pool from "./db/db.js"; // MySQL Ïó∞Í≤∞
import cors from "cors";
<<<<<<< HEAD
import mysql from "mysql2/promise"; // ‚úÖ MySQL Ïó∞Í≤∞ÏùÑ ÏúÑÌïú promise ÏßÄÏõê Î™®Îìà
=======
>>>>>>> fa169f129417fdbd1784573ea6bb7f7d6b1f2bb6

const app = express();
const WEB_PORT = 8000;
const TCP_PORT = 9000;

const server = http.createServer(app);
const wss = new WebSocketServer({ server });

let tcpClients = [];
let wsClients = [];

<<<<<<< HEAD
// ‚úÖ CORS Î∞è JSON ÌååÏã± ÎØ∏Îì§Ïõ®Ïñ¥ ÏÑ§Ï†ï
app.use(cors());
app.use(express.json());

=======
>>>>>>> fa169f129417fdbd1784573ea6bb7f7d6b1f2bb6
// üöÄ ÏÑúÎ≤Ñ ÏãúÏûë Ïãú ÌÖåÏù¥Î∏î Ï¥àÍ∏∞Ìôî
async function resetDatabase() {
  try {
    console.log("üîÑ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï¥àÍ∏∞Ìôî Ï§ë...");
    await pool.execute("DELETE FROM vehicle_data");
    await pool.execute("DELETE FROM attack_logs");
    console.log("‚úÖ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å (Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†úÎê®)");
  } catch (error) {
    console.error("üö® Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï¥àÍ∏∞Ìôî Ïò§Î•ò:", error);
  }
}

// üöó TCP ÏÑúÎ≤Ñ (Ï∞®Îüâ Ïó∞Í≤∞)
const tcpServer = net.createServer((socket) => {
  console.log("üöó Ï∞®Îüâ(TCP) Ïó∞Í≤∞Îê®");
  tcpClients.push(socket);

  socket.on("data", async (data) => {
    const packet = JSON.parse(data.toString());
    console.log("üì° ÏàòÏã†Îêú CAN Ìå®ÌÇ∑:", packet);

    // Îç∞Ïù¥ÌÑ∞ MySQLÏóê Ï†ÄÏû•
    try {
      await pool.execute(
        "INSERT INTO vehicle_data (arbitration_id, control_field, data) VALUES (?, ?, ?)",
        [packet.arbitration_id, packet.control_field, packet.data]
      );

      if (packet.attack_type !== "Normal") {
        await pool.execute(
          "INSERT INTO attack_logs (attack_type, arbitration_id, control_field, data) VALUES (?, ?, ?, ?)",
          [packet.attack_type, packet.arbitration_id, packet.control_field, packet.data]
        );
      }
    } catch (error) {
      console.error("üö® MySQL Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• Ïò§Î•ò:", error);
    }

    // WebSocketÏúºÎ°ú ÎåÄÏãúÎ≥¥ÎìúÏóê Ï†ÑÏÜ°
    wsClients.forEach((client) => client.send(JSON.stringify(packet)));
  });

  socket.on("end", () => {
    console.log("üöó Ï∞®Îüâ Ïó∞Í≤∞ Ï¢ÖÎ£å");
    tcpClients = tcpClients.filter(client => client !== socket);
  });
});

// üñ• WebSocket ÏÑúÎ≤Ñ (ÎåÄÏãúÎ≥¥Îìú Ïó∞Í≤∞)
wss.on("connection", (ws) => {
  console.log("üñ• ÎåÄÏãúÎ≥¥Îìú Ïó∞Í≤∞Îê®");
  wsClients.push(ws);

  ws.on("close", () => {
    console.log("üñ• ÎåÄÏãúÎ≥¥Îìú Ïó∞Í≤∞ Ï¢ÖÎ£å");
    wsClients = wsClients.filter(client => client !== ws);
  });
});

<<<<<<< HEAD
// üîç Î™®Îì† Í≥µÍ≤© Î°úÍ∑∏ Ï°∞Ìöå API (ÌéòÏù¥Ïßï Ï∂îÍ∞Ä Í∞ÄÎä•)
app.get("/api/all_attack_logs", async (req, res) => {
  try {
    let sql = "SELECT * FROM attack_logs ORDER BY timestamp DESC";
    const [rows] = await pool.execute(sql);
    res.json(rows);
  } catch (error) {
    console.error("üö® Í≥µÍ≤© Î°úÍ∑∏ Ï†ÑÏ≤¥ Ï°∞Ìöå Ïò§Î•ò:", error);
    res.status(500).send("ÏÑúÎ≤Ñ Ïò§Î•ò Î∞úÏÉù");
  }
});

app.post("/api/notify", async (req, res) => {
  try {
    const { attack_type } = req.body;
    if (!attack_type) return res.status(400).send("Í≥µÍ≤© Ïú†Ìòï ÌïÑÏöî");

    const piServerUrl = "http://192.168.110.131:5000/notify"; // ÎùºÏ¶àÎ≤†Î¶¨ÌååÏù¥ ÏÑúÎ≤Ñ URL
    await fetch(piServerUrl, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ attack_type }),
    });

    console.log(`üîî ÎùºÏ¶àÎ≤†Î¶¨ÌååÏù¥Ïóê ${attack_type} ÏïåÎ¶º Ï†ÑÏÜ°Îê®`);
    res.send("ÏïåÎ¶º Ï†ÑÏÜ° ÏôÑÎ£å");
  } catch (error) {
    console.error("üö® ÎùºÏ¶àÎ≤†Î¶¨ÌååÏù¥ ÏïåÎ¶º Ï†ÑÏÜ° Ïã§Ìå®:", error);
=======
app.use(cors());

// Í≥µÍ≤© Î°úÍ∑∏ Ï°∞Ìöå API
app.get("/api/attack_logs", async (req, res) => {
  try {
    const attackType = req.query.attack_type;
    let sql = "SELECT * FROM attack_logs ORDER BY timestamp DESC LIMIT 20";
    let params = [];

    if (attackType) {
      sql = "SELECT * FROM attack_logs WHERE attack_type = ? ORDER BY timestamp DESC LIMIT 20";
      params = [attackType];
    }

    const [rows] = await pool.execute(sql, params);
    res.json(rows);
  } catch (error) {
    console.error("üö® Í≥µÍ≤© Î°úÍ∑∏ Í≤ÄÏÉâ Ïò§Î•ò:", error);
>>>>>>> fa169f129417fdbd1784573ea6bb7f7d6b1f2bb6
    res.status(500).send("ÏÑúÎ≤Ñ Ïò§Î•ò Î∞úÏÉù");
  }
});


// üöÄ ÏÑúÎ≤Ñ Ïã§Ìñâ (Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî ÌõÑ ÏãúÏûë)
resetDatabase().then(() => {
  tcpServer.listen(TCP_PORT, () => console.log(`üöó TCP ÏÑúÎ≤Ñ Ïã§Ìñâ Ï§ë (Ìè¨Ìä∏: ${TCP_PORT})`));
  server.listen(WEB_PORT, () => console.log(`üñ• WebSocket ÏÑúÎ≤Ñ Ïã§Ìñâ Ï§ë (Ìè¨Ìä∏: ${WEB_PORT})`));
});